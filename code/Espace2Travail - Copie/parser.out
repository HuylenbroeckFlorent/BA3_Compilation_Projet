Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    IF
    ENDIF
    APOSTROPHE
    COMPARE

Grammar

Rule 0     S' -> programme
Rule 1     programme -> txt
Rule 2     programme -> txt programme
Rule 3     programme -> dumbo_bloc
Rule 4     programme -> dumbo_bloc programme
Rule 5     txt -> TXT
Rule 6     dumbo_bloc -> BLOCKstart expression_list BLOCKend
Rule 7     expression_list -> expression SEMICOLON expression_list
Rule 8     expression_list -> expression SEMICOLON
Rule 9     expression -> PRINT string_expression
Rule 10    expression -> FOR VARIABLE IN variable DO expression_list ENDFOR
Rule 11    expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR
Rule 12    expression -> VARIABLE AFFECT string_expression
Rule 13    expression -> VARIABLE AFFECT string_list
Rule 14    string_expression -> string
Rule 15    string_expression -> integer
Rule 16    string_expression -> boolean
Rule 17    string_expression -> variable
Rule 18    string_expression -> string_expression POINT string_expression
Rule 19    boolean -> string_expression ANDOR string_expression
Rule 20    string_list -> LPAREN string_list_interior RPAREN
Rule 21    string_list_interior -> string COMA string_list_interior
Rule 22    string_list_interior -> string
Rule 23    variable -> VARIABLE
Rule 24    string -> STR
Rule 25    integer -> string_expression INT_OP string_expression
Rule 26    integer -> INT
Rule 27    boolean -> BOOL

Terminals, with rules where they appear

AFFECT               : 12 13
ANDOR                : 19
APOSTROPHE           : 
BLOCKend             : 6
BLOCKstart           : 6
BOOL                 : 27
COMA                 : 21
COMPARE              : 
DO                   : 10 11
ELSE                 : 
ENDFOR               : 10 11
ENDIF                : 
FOR                  : 10 11
IF                   : 
IN                   : 10 11
INT                  : 26
INT_OP               : 25
LPAREN               : 20
POINT                : 18
PRINT                : 9
RPAREN               : 20
SEMICOLON            : 7 8
STR                  : 24
TXT                  : 5
VARIABLE             : 10 11 12 13 23
error                : 

Nonterminals, with rules where they appear

boolean              : 16
dumbo_bloc           : 3 4
expression           : 7 8
expression_list      : 6 7 10 11
integer              : 15
programme            : 2 4 0
string               : 14 21 22
string_expression    : 9 12 18 18 19 19 25 25
string_list          : 11 13
string_list_interior : 20 21
txt                  : 1 2
variable             : 10 17

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . txt
    (2) programme -> . txt programme
    (3) programme -> . dumbo_bloc
    (4) programme -> . dumbo_bloc programme
    (5) txt -> . TXT
    (6) dumbo_bloc -> . BLOCKstart expression_list BLOCKend

    TXT             shift and go to state 4
    BLOCKstart      shift and go to state 5

    programme                      shift and go to state 1
    txt                            shift and go to state 2
    dumbo_bloc                     shift and go to state 3

state 1

    (0) S' -> programme .



state 2

    (1) programme -> txt .
    (2) programme -> txt . programme
    (1) programme -> . txt
    (2) programme -> . txt programme
    (3) programme -> . dumbo_bloc
    (4) programme -> . dumbo_bloc programme
    (5) txt -> . TXT
    (6) dumbo_bloc -> . BLOCKstart expression_list BLOCKend

    $end            reduce using rule 1 (programme -> txt .)
    TXT             shift and go to state 4
    BLOCKstart      shift and go to state 5

    txt                            shift and go to state 2
    programme                      shift and go to state 6
    dumbo_bloc                     shift and go to state 3

state 3

    (3) programme -> dumbo_bloc .
    (4) programme -> dumbo_bloc . programme
    (1) programme -> . txt
    (2) programme -> . txt programme
    (3) programme -> . dumbo_bloc
    (4) programme -> . dumbo_bloc programme
    (5) txt -> . TXT
    (6) dumbo_bloc -> . BLOCKstart expression_list BLOCKend

    $end            reduce using rule 3 (programme -> dumbo_bloc .)
    TXT             shift and go to state 4
    BLOCKstart      shift and go to state 5

    dumbo_bloc                     shift and go to state 3
    programme                      shift and go to state 7
    txt                            shift and go to state 2

state 4

    (5) txt -> TXT .

    TXT             reduce using rule 5 (txt -> TXT .)
    BLOCKstart      reduce using rule 5 (txt -> TXT .)
    $end            reduce using rule 5 (txt -> TXT .)


state 5

    (6) dumbo_bloc -> BLOCKstart . expression_list BLOCKend
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT string_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . VARIABLE AFFECT string_expression
    (13) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 8
    expression                     shift and go to state 9

state 6

    (2) programme -> txt programme .

    $end            reduce using rule 2 (programme -> txt programme .)


state 7

    (4) programme -> dumbo_bloc programme .

    $end            reduce using rule 4 (programme -> dumbo_bloc programme .)


state 8

    (6) dumbo_bloc -> BLOCKstart expression_list . BLOCKend

    BLOCKend        shift and go to state 13


state 9

    (7) expression_list -> expression . SEMICOLON expression_list
    (8) expression_list -> expression . SEMICOLON

    SEMICOLON       shift and go to state 14


state 10

    (9) expression -> PRINT . string_expression
    (14) string_expression -> . string
    (15) string_expression -> . integer
    (16) string_expression -> . boolean
    (17) string_expression -> . variable
    (18) string_expression -> . string_expression POINT string_expression
    (24) string -> . STR
    (25) integer -> . string_expression INT_OP string_expression
    (26) integer -> . INT
    (19) boolean -> . string_expression ANDOR string_expression
    (27) boolean -> . BOOL
    (23) variable -> . VARIABLE

    STR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    VARIABLE        shift and go to state 23

    string_expression              shift and go to state 15
    string                         shift and go to state 16
    integer                        shift and go to state 17
    boolean                        shift and go to state 18
    variable                       shift and go to state 19

state 11

    (10) expression -> FOR . VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> FOR . VARIABLE IN string_list DO expression_list ENDFOR

    VARIABLE        shift and go to state 24


state 12

    (12) expression -> VARIABLE . AFFECT string_expression
    (13) expression -> VARIABLE . AFFECT string_list

    AFFECT          shift and go to state 25


state 13

    (6) dumbo_bloc -> BLOCKstart expression_list BLOCKend .

    TXT             reduce using rule 6 (dumbo_bloc -> BLOCKstart expression_list BLOCKend .)
    BLOCKstart      reduce using rule 6 (dumbo_bloc -> BLOCKstart expression_list BLOCKend .)
    $end            reduce using rule 6 (dumbo_bloc -> BLOCKstart expression_list BLOCKend .)


state 14

    (7) expression_list -> expression SEMICOLON . expression_list
    (8) expression_list -> expression SEMICOLON .
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT string_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . VARIABLE AFFECT string_expression
    (13) expression -> . VARIABLE AFFECT string_list

    BLOCKend        reduce using rule 8 (expression_list -> expression SEMICOLON .)
    ENDFOR          reduce using rule 8 (expression_list -> expression SEMICOLON .)
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 9
    expression_list                shift and go to state 26

state 15

    (9) expression -> PRINT string_expression .
    (18) string_expression -> string_expression . POINT string_expression
    (25) integer -> string_expression . INT_OP string_expression
    (19) boolean -> string_expression . ANDOR string_expression

    SEMICOLON       reduce using rule 9 (expression -> PRINT string_expression .)
    POINT           shift and go to state 27
    INT_OP          shift and go to state 28
    ANDOR           shift and go to state 29


state 16

    (14) string_expression -> string .

    POINT           reduce using rule 14 (string_expression -> string .)
    INT_OP          reduce using rule 14 (string_expression -> string .)
    ANDOR           reduce using rule 14 (string_expression -> string .)
    SEMICOLON       reduce using rule 14 (string_expression -> string .)


state 17

    (15) string_expression -> integer .

    POINT           reduce using rule 15 (string_expression -> integer .)
    INT_OP          reduce using rule 15 (string_expression -> integer .)
    ANDOR           reduce using rule 15 (string_expression -> integer .)
    SEMICOLON       reduce using rule 15 (string_expression -> integer .)


state 18

    (16) string_expression -> boolean .

    POINT           reduce using rule 16 (string_expression -> boolean .)
    INT_OP          reduce using rule 16 (string_expression -> boolean .)
    ANDOR           reduce using rule 16 (string_expression -> boolean .)
    SEMICOLON       reduce using rule 16 (string_expression -> boolean .)


state 19

    (17) string_expression -> variable .

    POINT           reduce using rule 17 (string_expression -> variable .)
    INT_OP          reduce using rule 17 (string_expression -> variable .)
    ANDOR           reduce using rule 17 (string_expression -> variable .)
    SEMICOLON       reduce using rule 17 (string_expression -> variable .)


state 20

    (24) string -> STR .

    POINT           reduce using rule 24 (string -> STR .)
    INT_OP          reduce using rule 24 (string -> STR .)
    ANDOR           reduce using rule 24 (string -> STR .)
    SEMICOLON       reduce using rule 24 (string -> STR .)
    COMA            reduce using rule 24 (string -> STR .)
    RPAREN          reduce using rule 24 (string -> STR .)


state 21

    (26) integer -> INT .

    POINT           reduce using rule 26 (integer -> INT .)
    INT_OP          reduce using rule 26 (integer -> INT .)
    ANDOR           reduce using rule 26 (integer -> INT .)
    SEMICOLON       reduce using rule 26 (integer -> INT .)


state 22

    (27) boolean -> BOOL .

    POINT           reduce using rule 27 (boolean -> BOOL .)
    INT_OP          reduce using rule 27 (boolean -> BOOL .)
    ANDOR           reduce using rule 27 (boolean -> BOOL .)
    SEMICOLON       reduce using rule 27 (boolean -> BOOL .)


state 23

    (23) variable -> VARIABLE .

    POINT           reduce using rule 23 (variable -> VARIABLE .)
    INT_OP          reduce using rule 23 (variable -> VARIABLE .)
    ANDOR           reduce using rule 23 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 23 (variable -> VARIABLE .)
    DO              reduce using rule 23 (variable -> VARIABLE .)


state 24

    (10) expression -> FOR VARIABLE . IN variable DO expression_list ENDFOR
    (11) expression -> FOR VARIABLE . IN string_list DO expression_list ENDFOR

    IN              shift and go to state 30


state 25

    (12) expression -> VARIABLE AFFECT . string_expression
    (13) expression -> VARIABLE AFFECT . string_list
    (14) string_expression -> . string
    (15) string_expression -> . integer
    (16) string_expression -> . boolean
    (17) string_expression -> . variable
    (18) string_expression -> . string_expression POINT string_expression
    (20) string_list -> . LPAREN string_list_interior RPAREN
    (24) string -> . STR
    (25) integer -> . string_expression INT_OP string_expression
    (26) integer -> . INT
    (19) boolean -> . string_expression ANDOR string_expression
    (27) boolean -> . BOOL
    (23) variable -> . VARIABLE

    LPAREN          shift and go to state 33
    STR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    VARIABLE        shift and go to state 23

    string_expression              shift and go to state 31
    string_list                    shift and go to state 32
    string                         shift and go to state 16
    integer                        shift and go to state 17
    boolean                        shift and go to state 18
    variable                       shift and go to state 19

state 26

    (7) expression_list -> expression SEMICOLON expression_list .

    BLOCKend        reduce using rule 7 (expression_list -> expression SEMICOLON expression_list .)
    ENDFOR          reduce using rule 7 (expression_list -> expression SEMICOLON expression_list .)


state 27

    (18) string_expression -> string_expression POINT . string_expression
    (14) string_expression -> . string
    (15) string_expression -> . integer
    (16) string_expression -> . boolean
    (17) string_expression -> . variable
    (18) string_expression -> . string_expression POINT string_expression
    (24) string -> . STR
    (25) integer -> . string_expression INT_OP string_expression
    (26) integer -> . INT
    (19) boolean -> . string_expression ANDOR string_expression
    (27) boolean -> . BOOL
    (23) variable -> . VARIABLE

    STR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    VARIABLE        shift and go to state 23

    string_expression              shift and go to state 34
    string                         shift and go to state 16
    integer                        shift and go to state 17
    boolean                        shift and go to state 18
    variable                       shift and go to state 19

state 28

    (25) integer -> string_expression INT_OP . string_expression
    (14) string_expression -> . string
    (15) string_expression -> . integer
    (16) string_expression -> . boolean
    (17) string_expression -> . variable
    (18) string_expression -> . string_expression POINT string_expression
    (24) string -> . STR
    (25) integer -> . string_expression INT_OP string_expression
    (26) integer -> . INT
    (19) boolean -> . string_expression ANDOR string_expression
    (27) boolean -> . BOOL
    (23) variable -> . VARIABLE

    STR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    VARIABLE        shift and go to state 23

    string_expression              shift and go to state 35
    string                         shift and go to state 16
    integer                        shift and go to state 17
    boolean                        shift and go to state 18
    variable                       shift and go to state 19

state 29

    (19) boolean -> string_expression ANDOR . string_expression
    (14) string_expression -> . string
    (15) string_expression -> . integer
    (16) string_expression -> . boolean
    (17) string_expression -> . variable
    (18) string_expression -> . string_expression POINT string_expression
    (24) string -> . STR
    (25) integer -> . string_expression INT_OP string_expression
    (26) integer -> . INT
    (19) boolean -> . string_expression ANDOR string_expression
    (27) boolean -> . BOOL
    (23) variable -> . VARIABLE

    STR             shift and go to state 20
    INT             shift and go to state 21
    BOOL            shift and go to state 22
    VARIABLE        shift and go to state 23

    string_expression              shift and go to state 36
    string                         shift and go to state 16
    integer                        shift and go to state 17
    boolean                        shift and go to state 18
    variable                       shift and go to state 19

state 30

    (10) expression -> FOR VARIABLE IN . variable DO expression_list ENDFOR
    (11) expression -> FOR VARIABLE IN . string_list DO expression_list ENDFOR
    (23) variable -> . VARIABLE
    (20) string_list -> . LPAREN string_list_interior RPAREN

    VARIABLE        shift and go to state 23
    LPAREN          shift and go to state 33

    variable                       shift and go to state 37
    string_list                    shift and go to state 38

state 31

    (12) expression -> VARIABLE AFFECT string_expression .
    (18) string_expression -> string_expression . POINT string_expression
    (25) integer -> string_expression . INT_OP string_expression
    (19) boolean -> string_expression . ANDOR string_expression

    SEMICOLON       reduce using rule 12 (expression -> VARIABLE AFFECT string_expression .)
    POINT           shift and go to state 27
    INT_OP          shift and go to state 28
    ANDOR           shift and go to state 29


state 32

    (13) expression -> VARIABLE AFFECT string_list .

    SEMICOLON       reduce using rule 13 (expression -> VARIABLE AFFECT string_list .)


state 33

    (20) string_list -> LPAREN . string_list_interior RPAREN
    (21) string_list_interior -> . string COMA string_list_interior
    (22) string_list_interior -> . string
    (24) string -> . STR

    STR             shift and go to state 20

    string_list_interior           shift and go to state 39
    string                         shift and go to state 40

state 34

    (18) string_expression -> string_expression POINT string_expression .
    (18) string_expression -> string_expression . POINT string_expression
    (25) integer -> string_expression . INT_OP string_expression
    (19) boolean -> string_expression . ANDOR string_expression

    POINT           reduce using rule 18 (string_expression -> string_expression POINT string_expression .)
    ANDOR           reduce using rule 18 (string_expression -> string_expression POINT string_expression .)
    SEMICOLON       reduce using rule 18 (string_expression -> string_expression POINT string_expression .)
    INT_OP          shift and go to state 28

  ! INT_OP          [ reduce using rule 18 (string_expression -> string_expression POINT string_expression .) ]
  ! POINT           [ shift and go to state 27 ]
  ! ANDOR           [ shift and go to state 29 ]


state 35

    (25) integer -> string_expression INT_OP string_expression .
    (18) string_expression -> string_expression . POINT string_expression
    (25) integer -> string_expression . INT_OP string_expression
    (19) boolean -> string_expression . ANDOR string_expression

    POINT           reduce using rule 25 (integer -> string_expression INT_OP string_expression .)
    INT_OP          reduce using rule 25 (integer -> string_expression INT_OP string_expression .)
    ANDOR           reduce using rule 25 (integer -> string_expression INT_OP string_expression .)
    SEMICOLON       reduce using rule 25 (integer -> string_expression INT_OP string_expression .)

  ! POINT           [ shift and go to state 27 ]
  ! INT_OP          [ shift and go to state 28 ]
  ! ANDOR           [ shift and go to state 29 ]


state 36

    (19) boolean -> string_expression ANDOR string_expression .
    (18) string_expression -> string_expression . POINT string_expression
    (25) integer -> string_expression . INT_OP string_expression
    (19) boolean -> string_expression . ANDOR string_expression

  ! shift/reduce conflict for POINT resolved as shift
  ! shift/reduce conflict for INT_OP resolved as shift
  ! shift/reduce conflict for ANDOR resolved as shift
    SEMICOLON       reduce using rule 19 (boolean -> string_expression ANDOR string_expression .)
    POINT           shift and go to state 27
    INT_OP          shift and go to state 28
    ANDOR           shift and go to state 29

  ! POINT           [ reduce using rule 19 (boolean -> string_expression ANDOR string_expression .) ]
  ! INT_OP          [ reduce using rule 19 (boolean -> string_expression ANDOR string_expression .) ]
  ! ANDOR           [ reduce using rule 19 (boolean -> string_expression ANDOR string_expression .) ]


state 37

    (10) expression -> FOR VARIABLE IN variable . DO expression_list ENDFOR

    DO              shift and go to state 41


state 38

    (11) expression -> FOR VARIABLE IN string_list . DO expression_list ENDFOR

    DO              shift and go to state 42


state 39

    (20) string_list -> LPAREN string_list_interior . RPAREN

    RPAREN          shift and go to state 43


state 40

    (21) string_list_interior -> string . COMA string_list_interior
    (22) string_list_interior -> string .

    COMA            shift and go to state 44
    RPAREN          reduce using rule 22 (string_list_interior -> string .)


state 41

    (10) expression -> FOR VARIABLE IN variable DO . expression_list ENDFOR
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT string_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . VARIABLE AFFECT string_expression
    (13) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 45
    expression                     shift and go to state 9

state 42

    (11) expression -> FOR VARIABLE IN string_list DO . expression_list ENDFOR
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT string_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . VARIABLE AFFECT string_expression
    (13) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 46
    expression                     shift and go to state 9

state 43

    (20) string_list -> LPAREN string_list_interior RPAREN .

    SEMICOLON       reduce using rule 20 (string_list -> LPAREN string_list_interior RPAREN .)
    DO              reduce using rule 20 (string_list -> LPAREN string_list_interior RPAREN .)


state 44

    (21) string_list_interior -> string COMA . string_list_interior
    (21) string_list_interior -> . string COMA string_list_interior
    (22) string_list_interior -> . string
    (24) string -> . STR

    STR             shift and go to state 20

    string                         shift and go to state 40
    string_list_interior           shift and go to state 47

state 45

    (10) expression -> FOR VARIABLE IN variable DO expression_list . ENDFOR

    ENDFOR          shift and go to state 48


state 46

    (11) expression -> FOR VARIABLE IN string_list DO expression_list . ENDFOR

    ENDFOR          shift and go to state 49


state 47

    (21) string_list_interior -> string COMA string_list_interior .

    RPAREN          reduce using rule 21 (string_list_interior -> string COMA string_list_interior .)


state 48

    (10) expression -> FOR VARIABLE IN variable DO expression_list ENDFOR .

    SEMICOLON       reduce using rule 10 (expression -> FOR VARIABLE IN variable DO expression_list ENDFOR .)


state 49

    (11) expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR .

    SEMICOLON       reduce using rule 11 (expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for POINT in state 36 resolved as shift
WARNING: shift/reduce conflict for INT_OP in state 36 resolved as shift
WARNING: shift/reduce conflict for ANDOR in state 36 resolved as shift
