
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMPAREleftPOINTleftINT_OPrightCOMPARETXT BLOCKstart BLOCKend BOOL ANDOR PRINT ELSE FOR IN ENDFOR DO IF ENDIF AFFECT VARIABLE SEMICOLON COMA LPAREN RPAREN APOSTROPHE STR INT_OP COMPARE POINT INTprogramme : txtprogramme : txt programmeprogramme : dumbo_blocprogramme : dumbo_bloc programmetxt : TXTdumbo_bloc : BLOCKstart expression_list BLOCKendexpression_list : expression SEMICOLON expression_listexpression_list : expression SEMICOLONexpression : PRINT string_expressionexpression : FOR VARIABLE IN variable DO expression_list ENDFOR \n    expression : FOR VARIABLE IN string_list DO expression_list ENDFORexpression : VARIABLE AFFECT string_expression\n    expression : VARIABLE AFFECT string_liststring_expression : string\n    string_expression : integer\n    string_expression : booleanstring_expression : variablestring_expression : string_expression POINT string_expressionboolean : string_expression ANDOR string_expressionstring_list : LPAREN string_list_interior RPARENstring_list_interior : string COMA string_list_interiorstring_list_interior : stringvariable : VARIABLEstring : STRinteger : string_expression INT_OP string_expressioninteger : INTboolean : BOOL'
    
_lr_action_items = {'TXT':([0,2,3,4,13,],[4,4,4,-5,-6,]),'BLOCKstart':([0,2,3,4,13,],[5,5,5,-5,-6,]),'$end':([1,2,3,4,6,7,13,],[0,-1,-3,-5,-2,-4,-6,]),'PRINT':([5,14,41,42,],[10,10,10,10,]),'FOR':([5,14,41,42,],[11,11,11,11,]),'VARIABLE':([5,10,11,14,25,27,28,29,30,41,42,],[12,23,24,12,23,23,23,23,23,12,12,]),'BLOCKend':([8,14,26,],[13,-8,-7,]),'SEMICOLON':([9,15,16,17,18,19,20,21,22,23,31,32,34,35,36,43,48,49,],[14,-9,-14,-15,-16,-17,-24,-26,-27,-23,-12,-13,-18,-25,-19,-20,-10,-11,]),'STR':([10,25,27,28,29,33,44,],[20,20,20,20,20,20,20,]),'INT':([10,25,27,28,29,],[21,21,21,21,21,]),'BOOL':([10,25,27,28,29,],[22,22,22,22,22,]),'AFFECT':([12,],[25,]),'ENDFOR':([14,26,45,46,],[-8,-7,48,49,]),'POINT':([15,16,17,18,19,20,21,22,23,31,34,35,36,],[27,-14,-15,-16,-17,-24,-26,-27,-23,27,-18,-25,27,]),'INT_OP':([15,16,17,18,19,20,21,22,23,31,34,35,36,],[28,-14,-15,-16,-17,-24,-26,-27,-23,28,28,-25,28,]),'ANDOR':([15,16,17,18,19,20,21,22,23,31,34,35,36,],[29,-14,-15,-16,-17,-24,-26,-27,-23,29,-18,-25,29,]),'COMA':([20,40,],[-24,44,]),'RPAREN':([20,39,40,47,],[-24,43,-22,-21,]),'DO':([23,37,38,43,],[-23,41,42,-20,]),'IN':([24,],[30,]),'LPAREN':([25,30,],[33,33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,3,],[1,6,7,]),'txt':([0,2,3,],[2,2,2,]),'dumbo_bloc':([0,2,3,],[3,3,3,]),'expression_list':([5,14,41,42,],[8,26,45,46,]),'expression':([5,14,41,42,],[9,9,9,9,]),'string_expression':([10,25,27,28,29,],[15,31,34,35,36,]),'string':([10,25,27,28,29,33,44,],[16,16,16,16,16,40,40,]),'integer':([10,25,27,28,29,],[17,17,17,17,17,]),'boolean':([10,25,27,28,29,],[18,18,18,18,18,]),'variable':([10,25,27,28,29,30,],[19,19,19,19,19,37,]),'string_list':([25,30,],[32,38,]),'string_list_interior':([33,44,],[39,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> txt','programme',1,'p_programme_txt','syntaxic.py',164),
  ('programme -> txt programme','programme',2,'p_programme_txtprog','syntaxic.py',168),
  ('programme -> dumbo_bloc','programme',1,'p_programme_dumboblock','syntaxic.py',172),
  ('programme -> dumbo_bloc programme','programme',2,'p_programme_dumboblockprog','syntaxic.py',176),
  ('txt -> TXT','txt',1,'p_txt','syntaxic.py',180),
  ('dumbo_bloc -> BLOCKstart expression_list BLOCKend','dumbo_bloc',3,'p_dumbo_block','syntaxic.py',184),
  ('expression_list -> expression SEMICOLON expression_list','expression_list',3,'p_expression_list_exprl','syntaxic.py',194),
  ('expression_list -> expression SEMICOLON','expression_list',2,'p_expression_list','syntaxic.py',200),
  ('expression -> PRINT string_expression','expression',2,'p_expression_print','syntaxic.py',204),
  ('expression -> FOR VARIABLE IN variable DO expression_list ENDFOR','expression',7,'p_expression_for','syntaxic.py',216),
  ('expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR','expression',7,'p_expression_for','syntaxic.py',217),
  ('expression -> VARIABLE AFFECT string_expression','expression',3,'p_expression_varstring','syntaxic.py',221),
  ('expression -> VARIABLE AFFECT string_list','expression',3,'p_expression_varstring','syntaxic.py',222),
  ('string_expression -> string','string_expression',1,'p_string_expression_string','syntaxic.py',232),
  ('string_expression -> integer','string_expression',1,'p_string_expression_string','syntaxic.py',233),
  ('string_expression -> boolean','string_expression',1,'p_string_expression_string','syntaxic.py',234),
  ('string_expression -> variable','string_expression',1,'p_string_expression_var','syntaxic.py',238),
  ('string_expression -> string_expression POINT string_expression','string_expression',3,'p_string_expression_strstr','syntaxic.py',242),
  ('boolean -> string_expression ANDOR string_expression','boolean',3,'p_boolean_andorresult','syntaxic.py',246),
  ('string_list -> LPAREN string_list_interior RPAREN','string_list',3,'p_string_list','syntaxic.py',251),
  ('string_list_interior -> string COMA string_list_interior','string_list_interior',3,'p_string_list_interior','syntaxic.py',255),
  ('string_list_interior -> string','string_list_interior',1,'p_string_list_interior_end','syntaxic.py',263),
  ('variable -> VARIABLE','variable',1,'p_variable','syntaxic.py',267),
  ('string -> STR','string',1,'p_string','syntaxic.py',271),
  ('integer -> string_expression INT_OP string_expression','integer',3,'p_int_operation','syntaxic.py',275),
  ('integer -> INT','integer',1,'p_int','syntaxic.py',279),
  ('boolean -> BOOL','boolean',1,'p_bool','syntaxic.py',283),
]
