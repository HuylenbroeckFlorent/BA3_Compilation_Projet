
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMPAREleftPOINTleftADD_OPleftMUL_OPrightCOMPARETXT BLOCKstart BLOCKend BOOL ANDOR PRINT ELSE FOR IN ENDFOR DO IF ENDIF AFFECT VARIABLE SEMICOLON COMA LPAREN RPAREN APOSTROPHE STR ADD_OP MUL_OP INT COMPARE POINTprogramme : txtprogramme : txt programmeprogramme : dumbo_blocprogramme : dumbo_bloc programmetxt : TXTdumbo_bloc : BLOCKstart expression_list BLOCKendexpression_list : expression SEMICOLON expression_listexpression_list : expression SEMICOLONexpression : PRINT string_expressionexpression : FOR VARIABLE IN variable DO expression_list ENDFOR \n    expression : FOR VARIABLE IN string_list DO expression_list ENDFORexpression : VARIABLE AFFECT string_expressionexpression : VARIABLE AFFECT string_liststring_expression : stringstring_expression : variablestring_expression : string_expression POINT string_expressionstring_list : LPAREN string_list_interior RPARENstring_list_interior : string COMA string_list_interiorstring_list_interior : stringvariable : VARIABLEstring : STR'
    
_lr_action_items = {'TXT':([0,2,3,4,13,],[4,4,4,-5,-6,]),'BLOCKstart':([0,2,3,4,13,],[5,5,5,-5,-6,]),'$end':([1,2,3,4,6,7,13,],[0,-1,-3,-5,-2,-4,-6,]),'PRINT':([5,14,33,34,],[10,10,10,10,]),'FOR':([5,14,33,34,],[11,11,11,11,]),'VARIABLE':([5,10,11,14,21,23,24,33,34,],[12,19,20,12,19,19,19,12,12,]),'BLOCKend':([8,14,22,],[13,-8,-7,]),'SEMICOLON':([9,15,16,17,18,19,25,26,28,35,40,41,],[14,-9,-14,-15,-21,-20,-12,-13,-16,-17,-10,-11,]),'STR':([10,21,23,27,36,],[18,18,18,18,18,]),'AFFECT':([12,],[21,]),'ENDFOR':([14,22,37,38,],[-8,-7,40,41,]),'POINT':([15,16,17,18,19,25,28,],[23,-14,-15,-21,-20,23,-16,]),'COMA':([18,32,],[-21,36,]),'RPAREN':([18,31,32,39,],[-21,35,-19,-18,]),'DO':([19,29,30,35,],[-20,33,34,-17,]),'IN':([20,],[24,]),'LPAREN':([21,24,],[27,27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,3,],[1,6,7,]),'txt':([0,2,3,],[2,2,2,]),'dumbo_bloc':([0,2,3,],[3,3,3,]),'expression_list':([5,14,33,34,],[8,22,37,38,]),'expression':([5,14,33,34,],[9,9,9,9,]),'string_expression':([10,21,23,],[15,25,28,]),'string':([10,21,23,27,36,],[16,16,16,32,32,]),'variable':([10,21,23,24,],[17,17,17,29,]),'string_list':([21,24,],[26,30,]),'string_list_interior':([27,36,],[31,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> txt','programme',1,'p_programme_txt','syntaxic.py',153),
  ('programme -> txt programme','programme',2,'p_programme_txtprog','syntaxic.py',157),
  ('programme -> dumbo_bloc','programme',1,'p_programme_dumboblock','syntaxic.py',161),
  ('programme -> dumbo_bloc programme','programme',2,'p_programme_dumboblockprog','syntaxic.py',165),
  ('txt -> TXT','txt',1,'p_txt','syntaxic.py',169),
  ('dumbo_bloc -> BLOCKstart expression_list BLOCKend','dumbo_bloc',3,'p_dumbo_block','syntaxic.py',173),
  ('expression_list -> expression SEMICOLON expression_list','expression_list',3,'p_expression_list_exprl','syntaxic.py',183),
  ('expression_list -> expression SEMICOLON','expression_list',2,'p_expression_list','syntaxic.py',189),
  ('expression -> PRINT string_expression','expression',2,'p_expression_print','syntaxic.py',193),
  ('expression -> FOR VARIABLE IN variable DO expression_list ENDFOR','expression',7,'p_expression_for','syntaxic.py',205),
  ('expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR','expression',7,'p_expression_for','syntaxic.py',206),
  ('expression -> VARIABLE AFFECT string_expression','expression',3,'p_expression_varstring','syntaxic.py',210),
  ('expression -> VARIABLE AFFECT string_list','expression',3,'p_expression_varlist','syntaxic.py',214),
  ('string_expression -> string','string_expression',1,'p_string_expression_string','syntaxic.py',218),
  ('string_expression -> variable','string_expression',1,'p_string_expression_var','syntaxic.py',222),
  ('string_expression -> string_expression POINT string_expression','string_expression',3,'p_string_expression_strstr','syntaxic.py',226),
  ('string_list -> LPAREN string_list_interior RPAREN','string_list',3,'p_string_list','syntaxic.py',230),
  ('string_list_interior -> string COMA string_list_interior','string_list_interior',3,'p_string_list_interior','syntaxic.py',234),
  ('string_list_interior -> string','string_list_interior',1,'p_string_list_interior_end','syntaxic.py',242),
  ('variable -> VARIABLE','variable',1,'p_variable','syntaxic.py',246),
  ('string -> STR','string',1,'p_string','syntaxic.py',250),
]
