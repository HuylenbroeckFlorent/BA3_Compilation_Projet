Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE

Grammar

Rule 0     S' -> programme
Rule 1     programme -> txt
Rule 2     programme -> txt programme
Rule 3     programme -> dumbo_bloc
Rule 4     programme -> dumbo_bloc programme
Rule 5     txt -> TXT
Rule 6     dumbo_bloc -> BLOCKstart expression_list BLOCKend
Rule 7     expression_list -> expression SEMICOLON expression_list
Rule 8     expression_list -> expression SEMICOLON
Rule 9     expression -> PRINT value_expression
Rule 10    expression -> FOR VARIABLE IN variable DO expression_list ENDFOR
Rule 11    expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR
Rule 12    expression -> IF boolean DO expression_list ENDIF
Rule 13    expression -> VARIABLE AFFECT value_expression
Rule 14    expression -> VARIABLE AFFECT string_list
Rule 15    value_expression -> string
Rule 16    value_expression -> integer
Rule 17    value_expression -> boolean
Rule 18    value_expression -> variable
Rule 19    value_expression -> value_expression POINT value_expression
Rule 20    boolean -> value_expression ANDOR value_expression
Rule 21    boolean -> value_expression COMPARE value_expression
Rule 22    string_list -> LPAREN string_list_interior RPAREN
Rule 23    string_list_interior -> string COMA string_list_interior
Rule 24    string_list_interior -> string
Rule 25    variable -> VARIABLE
Rule 26    string -> STR
Rule 27    integer -> value_expression INT_OP value_expression
Rule 28    integer -> INT
Rule 29    boolean -> BOOL

Terminals, with rules where they appear

AFFECT               : 13 14
ANDOR                : 20
APOSTROPHE           : 
BLOCKend             : 6
BLOCKstart           : 6
BOOL                 : 29
COMA                 : 23
COMPARE              : 21
DO                   : 10 11 12
ENDFOR               : 10 11
ENDIF                : 12
FOR                  : 10 11
IF                   : 12
IN                   : 10 11
INT                  : 28
INT_OP               : 27
LPAREN               : 22
POINT                : 19
PRINT                : 9
RPAREN               : 22
SEMICOLON            : 7 8
STR                  : 26
TXT                  : 5
VARIABLE             : 10 11 13 14 25
error                : 

Nonterminals, with rules where they appear

boolean              : 12 17
dumbo_bloc           : 3 4
expression           : 7 8
expression_list      : 6 7 10 11 12
integer              : 16
programme            : 2 4 0
string               : 15 23 24
string_list          : 11 14
string_list_interior : 22 23
txt                  : 1 2
value_expression     : 9 13 19 19 20 20 21 21 27 27
variable             : 10 18

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . txt
    (2) programme -> . txt programme
    (3) programme -> . dumbo_bloc
    (4) programme -> . dumbo_bloc programme
    (5) txt -> . TXT
    (6) dumbo_bloc -> . BLOCKstart expression_list BLOCKend

    TXT             shift and go to state 4
    BLOCKstart      shift and go to state 5

    programme                      shift and go to state 1
    txt                            shift and go to state 2
    dumbo_bloc                     shift and go to state 3

state 1

    (0) S' -> programme .



state 2

    (1) programme -> txt .
    (2) programme -> txt . programme
    (1) programme -> . txt
    (2) programme -> . txt programme
    (3) programme -> . dumbo_bloc
    (4) programme -> . dumbo_bloc programme
    (5) txt -> . TXT
    (6) dumbo_bloc -> . BLOCKstart expression_list BLOCKend

    $end            reduce using rule 1 (programme -> txt .)
    TXT             shift and go to state 4
    BLOCKstart      shift and go to state 5

    txt                            shift and go to state 2
    programme                      shift and go to state 6
    dumbo_bloc                     shift and go to state 3

state 3

    (3) programme -> dumbo_bloc .
    (4) programme -> dumbo_bloc . programme
    (1) programme -> . txt
    (2) programme -> . txt programme
    (3) programme -> . dumbo_bloc
    (4) programme -> . dumbo_bloc programme
    (5) txt -> . TXT
    (6) dumbo_bloc -> . BLOCKstart expression_list BLOCKend

    $end            reduce using rule 3 (programme -> dumbo_bloc .)
    TXT             shift and go to state 4
    BLOCKstart      shift and go to state 5

    dumbo_bloc                     shift and go to state 3
    programme                      shift and go to state 7
    txt                            shift and go to state 2

state 4

    (5) txt -> TXT .

    TXT             reduce using rule 5 (txt -> TXT .)
    BLOCKstart      reduce using rule 5 (txt -> TXT .)
    $end            reduce using rule 5 (txt -> TXT .)


state 5

    (6) dumbo_bloc -> BLOCKstart . expression_list BLOCKend
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT value_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . IF boolean DO expression_list ENDIF
    (13) expression -> . VARIABLE AFFECT value_expression
    (14) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 13
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 8
    expression                     shift and go to state 9

state 6

    (2) programme -> txt programme .

    $end            reduce using rule 2 (programme -> txt programme .)


state 7

    (4) programme -> dumbo_bloc programme .

    $end            reduce using rule 4 (programme -> dumbo_bloc programme .)


state 8

    (6) dumbo_bloc -> BLOCKstart expression_list . BLOCKend

    BLOCKend        shift and go to state 14


state 9

    (7) expression_list -> expression . SEMICOLON expression_list
    (8) expression_list -> expression . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (9) expression -> PRINT . value_expression
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (25) variable -> . VARIABLE

    STR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    VARIABLE        shift and go to state 24

    value_expression               shift and go to state 16
    string                         shift and go to state 17
    integer                        shift and go to state 18
    boolean                        shift and go to state 19
    variable                       shift and go to state 20

state 11

    (10) expression -> FOR . VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> FOR . VARIABLE IN string_list DO expression_list ENDFOR

    VARIABLE        shift and go to state 25


state 12

    (13) expression -> VARIABLE . AFFECT value_expression
    (14) expression -> VARIABLE . AFFECT string_list

    AFFECT          shift and go to state 26


state 13

    (12) expression -> IF . boolean DO expression_list ENDIF
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (25) variable -> . VARIABLE

    BOOL            shift and go to state 23
    STR             shift and go to state 21
    INT             shift and go to state 22
    VARIABLE        shift and go to state 24

    boolean                        shift and go to state 27
    value_expression               shift and go to state 28
    string                         shift and go to state 17
    integer                        shift and go to state 18
    variable                       shift and go to state 20

state 14

    (6) dumbo_bloc -> BLOCKstart expression_list BLOCKend .

    TXT             reduce using rule 6 (dumbo_bloc -> BLOCKstart expression_list BLOCKend .)
    BLOCKstart      reduce using rule 6 (dumbo_bloc -> BLOCKstart expression_list BLOCKend .)
    $end            reduce using rule 6 (dumbo_bloc -> BLOCKstart expression_list BLOCKend .)


state 15

    (7) expression_list -> expression SEMICOLON . expression_list
    (8) expression_list -> expression SEMICOLON .
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT value_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . IF boolean DO expression_list ENDIF
    (13) expression -> . VARIABLE AFFECT value_expression
    (14) expression -> . VARIABLE AFFECT string_list

    BLOCKend        reduce using rule 8 (expression_list -> expression SEMICOLON .)
    ENDIF           reduce using rule 8 (expression_list -> expression SEMICOLON .)
    ENDFOR          reduce using rule 8 (expression_list -> expression SEMICOLON .)
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 13
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 9
    expression_list                shift and go to state 29

state 16

    (9) expression -> PRINT value_expression .
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression
    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression

    SEMICOLON       reduce using rule 9 (expression -> PRINT value_expression .)
    POINT           shift and go to state 30
    INT_OP          shift and go to state 31
    ANDOR           shift and go to state 32
    COMPARE         shift and go to state 33


state 17

    (15) value_expression -> string .

    POINT           reduce using rule 15 (value_expression -> string .)
    INT_OP          reduce using rule 15 (value_expression -> string .)
    ANDOR           reduce using rule 15 (value_expression -> string .)
    COMPARE         reduce using rule 15 (value_expression -> string .)
    SEMICOLON       reduce using rule 15 (value_expression -> string .)
    DO              reduce using rule 15 (value_expression -> string .)


state 18

    (16) value_expression -> integer .

    POINT           reduce using rule 16 (value_expression -> integer .)
    INT_OP          reduce using rule 16 (value_expression -> integer .)
    ANDOR           reduce using rule 16 (value_expression -> integer .)
    COMPARE         reduce using rule 16 (value_expression -> integer .)
    SEMICOLON       reduce using rule 16 (value_expression -> integer .)
    DO              reduce using rule 16 (value_expression -> integer .)


state 19

    (17) value_expression -> boolean .

    POINT           reduce using rule 17 (value_expression -> boolean .)
    INT_OP          reduce using rule 17 (value_expression -> boolean .)
    ANDOR           reduce using rule 17 (value_expression -> boolean .)
    COMPARE         reduce using rule 17 (value_expression -> boolean .)
    SEMICOLON       reduce using rule 17 (value_expression -> boolean .)
    DO              reduce using rule 17 (value_expression -> boolean .)


state 20

    (18) value_expression -> variable .

    POINT           reduce using rule 18 (value_expression -> variable .)
    INT_OP          reduce using rule 18 (value_expression -> variable .)
    ANDOR           reduce using rule 18 (value_expression -> variable .)
    COMPARE         reduce using rule 18 (value_expression -> variable .)
    SEMICOLON       reduce using rule 18 (value_expression -> variable .)
    DO              reduce using rule 18 (value_expression -> variable .)


state 21

    (26) string -> STR .

    POINT           reduce using rule 26 (string -> STR .)
    INT_OP          reduce using rule 26 (string -> STR .)
    ANDOR           reduce using rule 26 (string -> STR .)
    COMPARE         reduce using rule 26 (string -> STR .)
    SEMICOLON       reduce using rule 26 (string -> STR .)
    DO              reduce using rule 26 (string -> STR .)
    COMA            reduce using rule 26 (string -> STR .)
    RPAREN          reduce using rule 26 (string -> STR .)


state 22

    (28) integer -> INT .

    POINT           reduce using rule 28 (integer -> INT .)
    INT_OP          reduce using rule 28 (integer -> INT .)
    ANDOR           reduce using rule 28 (integer -> INT .)
    COMPARE         reduce using rule 28 (integer -> INT .)
    SEMICOLON       reduce using rule 28 (integer -> INT .)
    DO              reduce using rule 28 (integer -> INT .)


state 23

    (29) boolean -> BOOL .

    POINT           reduce using rule 29 (boolean -> BOOL .)
    INT_OP          reduce using rule 29 (boolean -> BOOL .)
    ANDOR           reduce using rule 29 (boolean -> BOOL .)
    COMPARE         reduce using rule 29 (boolean -> BOOL .)
    SEMICOLON       reduce using rule 29 (boolean -> BOOL .)
    DO              reduce using rule 29 (boolean -> BOOL .)


state 24

    (25) variable -> VARIABLE .

    POINT           reduce using rule 25 (variable -> VARIABLE .)
    INT_OP          reduce using rule 25 (variable -> VARIABLE .)
    ANDOR           reduce using rule 25 (variable -> VARIABLE .)
    COMPARE         reduce using rule 25 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 25 (variable -> VARIABLE .)
    DO              reduce using rule 25 (variable -> VARIABLE .)


state 25

    (10) expression -> FOR VARIABLE . IN variable DO expression_list ENDFOR
    (11) expression -> FOR VARIABLE . IN string_list DO expression_list ENDFOR

    IN              shift and go to state 34


state 26

    (13) expression -> VARIABLE AFFECT . value_expression
    (14) expression -> VARIABLE AFFECT . string_list
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (22) string_list -> . LPAREN string_list_interior RPAREN
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (25) variable -> . VARIABLE

    LPAREN          shift and go to state 37
    STR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    VARIABLE        shift and go to state 24

    value_expression               shift and go to state 35
    string_list                    shift and go to state 36
    string                         shift and go to state 17
    integer                        shift and go to state 18
    boolean                        shift and go to state 19
    variable                       shift and go to state 20

state 27

    (12) expression -> IF boolean . DO expression_list ENDIF
    (17) value_expression -> boolean .

    DO              shift and go to state 38
    ANDOR           reduce using rule 17 (value_expression -> boolean .)
    COMPARE         reduce using rule 17 (value_expression -> boolean .)
    POINT           reduce using rule 17 (value_expression -> boolean .)
    INT_OP          reduce using rule 17 (value_expression -> boolean .)


state 28

    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression

    ANDOR           shift and go to state 32
    COMPARE         shift and go to state 33
    POINT           shift and go to state 30
    INT_OP          shift and go to state 31


state 29

    (7) expression_list -> expression SEMICOLON expression_list .

    BLOCKend        reduce using rule 7 (expression_list -> expression SEMICOLON expression_list .)
    ENDIF           reduce using rule 7 (expression_list -> expression SEMICOLON expression_list .)
    ENDFOR          reduce using rule 7 (expression_list -> expression SEMICOLON expression_list .)


state 30

    (19) value_expression -> value_expression POINT . value_expression
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (25) variable -> . VARIABLE

    STR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    VARIABLE        shift and go to state 24

    value_expression               shift and go to state 39
    string                         shift and go to state 17
    integer                        shift and go to state 18
    boolean                        shift and go to state 19
    variable                       shift and go to state 20

state 31

    (27) integer -> value_expression INT_OP . value_expression
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (25) variable -> . VARIABLE

    STR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    VARIABLE        shift and go to state 24

    value_expression               shift and go to state 40
    string                         shift and go to state 17
    integer                        shift and go to state 18
    boolean                        shift and go to state 19
    variable                       shift and go to state 20

state 32

    (20) boolean -> value_expression ANDOR . value_expression
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (25) variable -> . VARIABLE

    STR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    VARIABLE        shift and go to state 24

    value_expression               shift and go to state 41
    string                         shift and go to state 17
    integer                        shift and go to state 18
    boolean                        shift and go to state 19
    variable                       shift and go to state 20

state 33

    (21) boolean -> value_expression COMPARE . value_expression
    (15) value_expression -> . string
    (16) value_expression -> . integer
    (17) value_expression -> . boolean
    (18) value_expression -> . variable
    (19) value_expression -> . value_expression POINT value_expression
    (26) string -> . STR
    (27) integer -> . value_expression INT_OP value_expression
    (28) integer -> . INT
    (20) boolean -> . value_expression ANDOR value_expression
    (21) boolean -> . value_expression COMPARE value_expression
    (29) boolean -> . BOOL
    (25) variable -> . VARIABLE

    STR             shift and go to state 21
    INT             shift and go to state 22
    BOOL            shift and go to state 23
    VARIABLE        shift and go to state 24

    value_expression               shift and go to state 42
    string                         shift and go to state 17
    integer                        shift and go to state 18
    boolean                        shift and go to state 19
    variable                       shift and go to state 20

state 34

    (10) expression -> FOR VARIABLE IN . variable DO expression_list ENDFOR
    (11) expression -> FOR VARIABLE IN . string_list DO expression_list ENDFOR
    (25) variable -> . VARIABLE
    (22) string_list -> . LPAREN string_list_interior RPAREN

    VARIABLE        shift and go to state 24
    LPAREN          shift and go to state 37

    variable                       shift and go to state 43
    string_list                    shift and go to state 44

state 35

    (13) expression -> VARIABLE AFFECT value_expression .
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression
    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression

    SEMICOLON       reduce using rule 13 (expression -> VARIABLE AFFECT value_expression .)
    POINT           shift and go to state 30
    INT_OP          shift and go to state 31
    ANDOR           shift and go to state 32
    COMPARE         shift and go to state 33


state 36

    (14) expression -> VARIABLE AFFECT string_list .

    SEMICOLON       reduce using rule 14 (expression -> VARIABLE AFFECT string_list .)


state 37

    (22) string_list -> LPAREN . string_list_interior RPAREN
    (23) string_list_interior -> . string COMA string_list_interior
    (24) string_list_interior -> . string
    (26) string -> . STR

    STR             shift and go to state 21

    string_list_interior           shift and go to state 45
    string                         shift and go to state 46

state 38

    (12) expression -> IF boolean DO . expression_list ENDIF
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT value_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . IF boolean DO expression_list ENDIF
    (13) expression -> . VARIABLE AFFECT value_expression
    (14) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 13
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 47
    expression                     shift and go to state 9

state 39

    (19) value_expression -> value_expression POINT value_expression .
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression
    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression

    POINT           reduce using rule 19 (value_expression -> value_expression POINT value_expression .)
    ANDOR           reduce using rule 19 (value_expression -> value_expression POINT value_expression .)
    COMPARE         reduce using rule 19 (value_expression -> value_expression POINT value_expression .)
    SEMICOLON       reduce using rule 19 (value_expression -> value_expression POINT value_expression .)
    DO              reduce using rule 19 (value_expression -> value_expression POINT value_expression .)
    INT_OP          shift and go to state 31

  ! INT_OP          [ reduce using rule 19 (value_expression -> value_expression POINT value_expression .) ]
  ! POINT           [ shift and go to state 30 ]
  ! ANDOR           [ shift and go to state 32 ]
  ! COMPARE         [ shift and go to state 33 ]


state 40

    (27) integer -> value_expression INT_OP value_expression .
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression
    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression

    POINT           reduce using rule 27 (integer -> value_expression INT_OP value_expression .)
    INT_OP          reduce using rule 27 (integer -> value_expression INT_OP value_expression .)
    ANDOR           reduce using rule 27 (integer -> value_expression INT_OP value_expression .)
    COMPARE         reduce using rule 27 (integer -> value_expression INT_OP value_expression .)
    SEMICOLON       reduce using rule 27 (integer -> value_expression INT_OP value_expression .)
    DO              reduce using rule 27 (integer -> value_expression INT_OP value_expression .)

  ! POINT           [ shift and go to state 30 ]
  ! INT_OP          [ shift and go to state 31 ]
  ! ANDOR           [ shift and go to state 32 ]
  ! COMPARE         [ shift and go to state 33 ]


state 41

    (20) boolean -> value_expression ANDOR value_expression .
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression
    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression

  ! shift/reduce conflict for POINT resolved as shift
  ! shift/reduce conflict for INT_OP resolved as shift
  ! shift/reduce conflict for ANDOR resolved as shift
  ! shift/reduce conflict for COMPARE resolved as shift
    SEMICOLON       reduce using rule 20 (boolean -> value_expression ANDOR value_expression .)
    DO              reduce using rule 20 (boolean -> value_expression ANDOR value_expression .)
    POINT           shift and go to state 30
    INT_OP          shift and go to state 31
    ANDOR           shift and go to state 32
    COMPARE         shift and go to state 33

  ! POINT           [ reduce using rule 20 (boolean -> value_expression ANDOR value_expression .) ]
  ! INT_OP          [ reduce using rule 20 (boolean -> value_expression ANDOR value_expression .) ]
  ! ANDOR           [ reduce using rule 20 (boolean -> value_expression ANDOR value_expression .) ]
  ! COMPARE         [ reduce using rule 20 (boolean -> value_expression ANDOR value_expression .) ]


state 42

    (21) boolean -> value_expression COMPARE value_expression .
    (19) value_expression -> value_expression . POINT value_expression
    (27) integer -> value_expression . INT_OP value_expression
    (20) boolean -> value_expression . ANDOR value_expression
    (21) boolean -> value_expression . COMPARE value_expression

    ANDOR           reduce using rule 21 (boolean -> value_expression COMPARE value_expression .)
    COMPARE         reduce using rule 21 (boolean -> value_expression COMPARE value_expression .)
    SEMICOLON       reduce using rule 21 (boolean -> value_expression COMPARE value_expression .)
    DO              reduce using rule 21 (boolean -> value_expression COMPARE value_expression .)
    POINT           shift and go to state 30
    INT_OP          shift and go to state 31

  ! POINT           [ reduce using rule 21 (boolean -> value_expression COMPARE value_expression .) ]
  ! INT_OP          [ reduce using rule 21 (boolean -> value_expression COMPARE value_expression .) ]
  ! ANDOR           [ shift and go to state 32 ]
  ! COMPARE         [ shift and go to state 33 ]


state 43

    (10) expression -> FOR VARIABLE IN variable . DO expression_list ENDFOR

    DO              shift and go to state 48


state 44

    (11) expression -> FOR VARIABLE IN string_list . DO expression_list ENDFOR

    DO              shift and go to state 49


state 45

    (22) string_list -> LPAREN string_list_interior . RPAREN

    RPAREN          shift and go to state 50


state 46

    (23) string_list_interior -> string . COMA string_list_interior
    (24) string_list_interior -> string .

    COMA            shift and go to state 51
    RPAREN          reduce using rule 24 (string_list_interior -> string .)


state 47

    (12) expression -> IF boolean DO expression_list . ENDIF

    ENDIF           shift and go to state 52


state 48

    (10) expression -> FOR VARIABLE IN variable DO . expression_list ENDFOR
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT value_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . IF boolean DO expression_list ENDIF
    (13) expression -> . VARIABLE AFFECT value_expression
    (14) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 13
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 53
    expression                     shift and go to state 9

state 49

    (11) expression -> FOR VARIABLE IN string_list DO . expression_list ENDFOR
    (7) expression_list -> . expression SEMICOLON expression_list
    (8) expression_list -> . expression SEMICOLON
    (9) expression -> . PRINT value_expression
    (10) expression -> . FOR VARIABLE IN variable DO expression_list ENDFOR
    (11) expression -> . FOR VARIABLE IN string_list DO expression_list ENDFOR
    (12) expression -> . IF boolean DO expression_list ENDIF
    (13) expression -> . VARIABLE AFFECT value_expression
    (14) expression -> . VARIABLE AFFECT string_list

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 13
    VARIABLE        shift and go to state 12

    expression_list                shift and go to state 54
    expression                     shift and go to state 9

state 50

    (22) string_list -> LPAREN string_list_interior RPAREN .

    SEMICOLON       reduce using rule 22 (string_list -> LPAREN string_list_interior RPAREN .)
    DO              reduce using rule 22 (string_list -> LPAREN string_list_interior RPAREN .)


state 51

    (23) string_list_interior -> string COMA . string_list_interior
    (23) string_list_interior -> . string COMA string_list_interior
    (24) string_list_interior -> . string
    (26) string -> . STR

    STR             shift and go to state 21

    string                         shift and go to state 46
    string_list_interior           shift and go to state 55

state 52

    (12) expression -> IF boolean DO expression_list ENDIF .

    SEMICOLON       reduce using rule 12 (expression -> IF boolean DO expression_list ENDIF .)


state 53

    (10) expression -> FOR VARIABLE IN variable DO expression_list . ENDFOR

    ENDFOR          shift and go to state 56


state 54

    (11) expression -> FOR VARIABLE IN string_list DO expression_list . ENDFOR

    ENDFOR          shift and go to state 57


state 55

    (23) string_list_interior -> string COMA string_list_interior .

    RPAREN          reduce using rule 23 (string_list_interior -> string COMA string_list_interior .)


state 56

    (10) expression -> FOR VARIABLE IN variable DO expression_list ENDFOR .

    SEMICOLON       reduce using rule 10 (expression -> FOR VARIABLE IN variable DO expression_list ENDFOR .)


state 57

    (11) expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR .

    SEMICOLON       reduce using rule 11 (expression -> FOR VARIABLE IN string_list DO expression_list ENDFOR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for POINT in state 41 resolved as shift
WARNING: shift/reduce conflict for INT_OP in state 41 resolved as shift
WARNING: shift/reduce conflict for ANDOR in state 41 resolved as shift
WARNING: shift/reduce conflict for COMPARE in state 41 resolved as shift
